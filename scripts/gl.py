#!/usr/bin/env python3
import xml.etree.ElementTree as ET
import urllib.request
import os
import argparse
from packaging.version import Version

# --- Configuration ---
# The official source for the OpenGL XML registry
XML_URL = "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml"
XML_FILENAME = "gl.xml"

def download_gl_xml():
    """Downloads the gl.xml file if it doesn't exist or is outdated."""
    print(f"Checking for {XML_FILENAME}...")
    if not os.path.exists(XML_FILENAME):
        print(f"Downloading {XML_URL}...")
        try:
            urllib.request.urlretrieve(XML_URL, XML_FILENAME)
            print("Download complete.")
        except Exception as e:
            print(f"Error: Could not download {XML_URL}. {e}")
            exit(1)
    else:
        print(f"{XML_FILENAME} already exists.")

def get_full_text(element):
    """Recursively gets all text from an element, including its children's tails."""
    text = element.text or ''
    for child in element:
        text += get_full_text(child)
        if child.tail:
            text += child.tail
    return text.strip()

def main(api_version, output_file):
    """Main function to generate the C stubs."""
    download_gl_xml()

    print(f"Parsing {XML_FILENAME} for OpenGL Core Profile v{api_version}...")
    tree = ET.parse(XML_FILENAME)
    root = tree.getroot()

    # --- Step 1: Identify all functions in the requested core profile ---
    core_functions = set()
    target_version = Version(api_version)

    for feature in root.findall(f"feature[@api='gl']"):
        feature_version = Version(feature.get('number'))
        if feature_version <= target_version:
            # Add functions required by this version
            for command in feature.findall("require/command"):
                core_functions.add(command.get('name'))
            # Remove functions deprecated in this version's core profile
            for command in feature.findall("remove[@profile='core']/command"):
                name_to_remove = command.get('name')
                if name_to_remove in core_functions:
                    core_functions.remove(name_to_remove)

    print(f"Found {len(core_functions)} functions for Core Profile v{api_version}.")

    # --- Step 2: Build a dictionary of function prototypes ---
    prototypes = {}
    for command in root.findall("commands/command"):
        proto_elem = command.find("proto")
        name = proto_elem.find("name").text
        
        if name in core_functions:
            # Build the C prototype string
            return_type = get_full_text(proto_elem).replace(name, '').strip()
            params_list = []
            for param in command.findall("param"):
                params_list.append(get_full_text(param).replace('const', 'const ').replace('  ', ' '))
            
            if not params_list:
                params_str = "void"
            else:
                params_str = ", ".join(params_list)

            prototype_str = f"{return_type} {name}({params_str})"
            prototypes[name] = prototype_str

    print(f"Successfully built {len(prototypes)} function prototypes.")

    # --- Step 3: Write the C stubs file ---
    print(f"Generating C stubs in {output_file}...")
    with open(output_file, 'w') as f:
        f.write("/*\n")
        f.write(f" * OpenGL Core Profile v{api_version} function stubs\n")
        f.write(f" * Generated by generate_core_stubs.py\n")
        f.write(" * DO NOT EDIT THIS FILE DIRECTLY.\n")
        f.write(" */\n\n")
        f.write('#include "gl_procs.h"\n')
        f.write('#include <stdio.h>\n\n')
        f.write('#define UNIMPLEMENTED() \\\n')
        f.write('    do { \\\n')
        f.write('        static int warned = 0; \\\n')
        f.write('        if (!warned) { \\\n')
        f.write('            fprintf(stderr, "GL STUB: %s is not yet implemented!\\n", __func__); \\\n')
        f.write('            warned = 1; \\\n')
        f.write('        } \\\n')
        f.write('    } while (0)\n\n')
        f.write('#ifdef __cplusplus\nextern "C" {\n#endif\n\n')

        # Write functions in alphabetical order for consistency
        for name in sorted(prototypes.keys()):
            f.write(f"{prototypes[name]} {{\n")
            f.write("    UNIMPLEMENTED();\n")
            # For functions with a return value, a real implementation needs a return statement.
            # This is a good place to add a placeholder.
            if "void" not in prototypes[name].split()[0]:
                 f.write("    return 0; // FIXME: Add a proper return value!\n")
            f.write("}\n\n")

        f.write('#ifdef __cplusplus\n}\n#endif\n')

    print("--- Stub generation complete. ---")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate OpenGL Core Profile C stubs from gl.xml.")
    parser.add_argument(
        "--version",
        default="3.3",
        help="The OpenGL Core Profile version to target (e.g., '3.3', '4.5'). Default: 3.3"
    )
    parser.add_argument(
        "--output",
        default="opengl_stubs.c",
        help="The name of the output C file. Default: opengl_stubs.c"
    )
    args = parser.parse_args()
    main(args.version, args.output)
