--- gl.c.old	2025-07-21 16:35:49.928724800 +0700
+++ gl.c	2025-07-21 16:41:32.904713081 +0700
@@ -36,6 +36,17 @@
     return gles.core.glMapBufferRange(target, offset, length, access);
 }
 
+static void* glMapBuffer_internal(GLenum target, GLenum access) {
+    if(gles.ext.glMapBufferOES) return gles.ext.glMapBufferOES(target, access);
+    GLint size;
+    gles.core.glGetBufferParameteriv(target, GL_BUFFER_SIZE, &size);
+    GLbitfield access_flags = 0;
+    if (access == GL_READ_ONLY)  access_flags = GL_MAP_READ_BIT;
+    if (access == GL_WRITE_ONLY) access_flags = GL_MAP_WRITE_BIT;
+    if (access == GL_READ_WRITE) access_flags = GL_MAP_READ_BIT | GL_MAP_WRITE_BIT;
+    return glMapBufferRange_internal(target, 0, size, access_flags);
+}
+
 static void glBindFramebuffer_internal(GLenum target, GLuint framebuffer) {
     if (target == GL_FRAMEBUFFER || target == GL_DRAW_FRAMEBUFFER) {
         if (gl_state.draw_fbo == framebuffer) return;
@@ -49,6 +60,53 @@
     gles.core.glBindFramebuffer(target, framebuffer);
 }
 
+static void glBindBuffer_internal(GLenum target, GLuint buffer) {
+    switch (target) {
+        case GL_ARRAY_BUFFER:
+            if (gl_state.array_buffer == buffer) return;
+            gl_state.array_buffer = buffer;
+            break;
+        case GL_ELEMENT_ARRAY_BUFFER:
+            // This one is tricky because it's part of the VAO state.
+            // For now, let's cache it, but be aware of this dependency.
+            if (gl_state.element_array_buffer == buffer) return;
+            gl_state.element_array_buffer = buffer;
+            break;
+        case GL_COPY_READ_BUFFER:
+            if (gl_state.copy_read_buffer == buffer) return;
+            gl_state.copy_read_buffer = buffer;
+            break;
+        case GL_COPY_WRITE_BUFFER:
+            if (gl_state.copy_write_buffer == buffer) return;
+            gl_state.copy_write_buffer = buffer;
+            break;
+        case GL_UNIFORM_BUFFER:
+            if (gl_state.uniform_buffer == buffer) return;
+            gl_state.uniform_buffer = buffer;
+            break;
+        // Add other targets as you support them
+        default:
+            // For targets we don't cache, just call through.
+            // Or, you could decide to cache all of them.
+            break;
+    }
+    gles.core.glBindBuffer(target, buffer);
+}
+
+void glGetBufferSubData_internal(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
+    void* map_ptr = NULL;
+    gles.core.glGetBufferPointerv(target, GL_BUFFER_MAP_POINTER, &map_ptr);
+    if (map_ptr != NULL) {
+        memcpy(data, (char*)map_ptr + offset, size);
+    } else {
+        map_ptr = gles.core.glMapBufferRange(target, offset, size, GL_MAP_READ_BIT);
+        if (map_ptr) {
+            memcpy(data, map_ptr, size);
+            gles.core.glUnmapBuffer(target);
+        }
+    }
+}
+
 // Actual implementation goes here
 
 void glActiveShaderProgram(GLuint pipeline, GLuint program) {
@@ -85,7 +143,7 @@
 }
 
 void glBindBuffer(GLenum target, GLuint buffer) {
-    gles.core.glBindBuffer(target, buffer);
+    glBindBuffer_internal(target, buffer);
 }
 
 void glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
@@ -219,23 +277,20 @@
 }
 
 void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
-    GLuint read_fbo = gl_state.read_fbo;
-    GLuint draw_fbo = gl_state.draw_fbo;
-
-    if (read_fbo != readFramebuffer) {
+    if (gl_state.read_fbo != readFramebuffer) {
         glBindFramebuffer_internal(GL_READ_FRAMEBUFFER, readFramebuffer);
     }
-    if (draw_fbo != drawFramebuffer) {
+    if (gl_state.draw_fbo != drawFramebuffer) {
         glBindFramebuffer_internal(GL_DRAW_FRAMEBUFFER, drawFramebuffer);
     }
 
     gles.core.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
 
-    if (read_fbo != readFramebuffer) {
-        glBindFramebuffer_internal(GL_READ_FRAMEBUFFER, read_fbo);
+    if (gl_state.read_fbo != readFramebuffer) {
+        glBindFramebuffer_internal(GL_READ_FRAMEBUFFER, gl_state.read_fbo);
     }
-    if (draw_fbo != drawFramebuffer) {
-        glBindFramebuffer_internal(GL_DRAW_FRAMEBUFFER, draw_fbo);
+    if (gl_state.draw_fbo != drawFramebuffer) {
+        glBindFramebuffer_internal(GL_DRAW_FRAMEBUFFER, gl_state.draw_fbo);
     }
 }
 
@@ -257,22 +312,21 @@
 }
 
 GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
-    GLint oldFbo;
-    GLenum binding_pname;
+    GLuint currently_bound_fbo;
     if (target == GL_READ_FRAMEBUFFER) {
-        binding_pname = GL_READ_FRAMEBUFFER_BINDING;
-    } else {
-        binding_pname = GL_DRAW_FRAMEBUFFER_BINDING;
+        currently_bound_fbo = gl_state.read_fbo;
+    } else { // GL_DRAW_FRAMEBUFFER or GL_FRAMEBUFFER
+        currently_bound_fbo = gl_state.draw_fbo;
     }
-    gles.core.glGetIntegerv(binding_pname, &oldFbo);
 
-    if ((GLuint)oldFbo == framebuffer) {
+    if (currently_bound_fbo == framebuffer) {
         return gles.core.glCheckFramebufferStatus(target);
     }
 
-    gles.core.glBindFramebuffer(target, framebuffer);
+    GLuint old_fbo = currently_bound_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
     GLenum status = gles.core.glCheckFramebufferStatus(target);
-    gles.core.glBindFramebuffer(target, oldFbo);
+    glBindFramebuffer_internal(target, old_fbo);
 
     return status;
 }
@@ -441,7 +495,16 @@
 }
 
 void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
-    UNIMPLEMENTED();
+    GLuint old_read_buffer = gl_state.copy_read_buffer;
+    GLuint old_write_buffer = gl_state.copy_write_buffer;
+
+    glBindBuffer_internal(GL_COPY_READ_BUFFER, readBuffer);
+    glBindBuffer_internal(GL_COPY_WRITE_BUFFER, writeBuffer);
+
+    gles.core.glCopyBufferSubData(GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, readOffset, writeOffset, size);
+
+    glBindBuffer_internal(GL_COPY_READ_BUFFER, old_read_buffer);
+    glBindBuffer_internal(GL_COPY_WRITE_BUFFER, old_write_buffer);
 }
 
 void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
@@ -772,12 +835,10 @@
 }
 
 void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
-    const GLenum target = GL_ARRAY_BUFFER;
-    GLint old_buffer;
-    gles.core.glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &old_buffer);
-    gles.core.glBindBuffer(target, buffer);
-    gles.core.glFlushMappedBufferRange(target, offset, length);
-    gles.core.glBindBuffer(target, old_buffer);
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    gles.core.glFlushMappedBufferRange(GL_ARRAY_BUFFER, offset, length);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
 }
 
 void glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
@@ -926,7 +987,7 @@
 }
 
 void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
-    UNIMPLEMENTED();
+    glGetBufferSubData_internal(target, offset, size, data);
 }
 
 void glGetCompressedTexImage(GLenum target, GLint level, void *img) {
@@ -1015,27 +1076,59 @@
 }
 
 void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) {
-    UNIMPLEMENTED();
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    gles.core.glGetBufferParameteri64v(GL_ARRAY_BUFFER, pname, params);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
 }
 
 void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) {
-    UNIMPLEMENTED();
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    gles.core.glGetBufferParameteriv(GL_ARRAY_BUFFER, pname, params);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
 }
 
 void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) {
-    UNIMPLEMENTED();
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    gles.core.glGetBufferPointerv(GL_ARRAY_BUFFER, pname, params);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
 }
 
 void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
-    UNIMPLEMENTED();
+    GLuint old_buffer = gl_state.copy_read_buffer;
+    glBindBuffer_internal(GL_COPY_READ_BUFFER, buffer);
+    glGetBufferSubData_internal(GL_COPY_READ_BUFFER, offset, size, data);
+    glBindBuffer_internal(GL_COPY_READ_BUFFER, old_buffer);
 }
 
 void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
+
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
+
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glGetFramebufferParameteriv(target, pname, param);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glGetFramebufferParameteriv(target, pname, param);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) {
@@ -1571,33 +1664,27 @@
 }
 
 void * glMapBuffer(GLenum target, GLenum access) {
-    if(gles.ext.glMapBufferOES) return gles.ext.glMapBufferOES(target, access);
-    GLint size;
-    gles.core.glGetBufferParameteriv(target, GL_BUFFER_SIZE, &size);
-    GLbitfield access_flags = 0;
-    if (access == GL_READ_ONLY)  access_flags = GL_MAP_READ_BIT;
-    if (access == GL_WRITE_ONLY) access_flags = GL_MAP_WRITE_BIT;
-    if (access == GL_READ_WRITE) access_flags = GL_MAP_READ_BIT | GL_MAP_WRITE_BIT;
-    return glMapBufferRange_internal(target, 0, size, access_flags);
+    return glMapBuffer_internal(target, access);
 }
 
 void* glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
     return glMapBufferRange_internal(target, offset, length, access);
 }
 
-void * glMapNamedBuffer(GLuint buffer, GLenum access) {
-    UNIMPLEMENTED();
-    return NULL;
+void *glMapNamedBuffer(GLuint buffer, GLenum access) {
+    const GLenum target = GL_ARRAY_BUFFER;
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(target, buffer);
+    void *ptr = glMapBuffer_internal(target, access);
+    glBindBuffer_internal(target, old_buffer);
+    return ptr;
 }
 
 void * glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
-    const GLenum target = GL_ARRAY_BUFFER;
-    void* mapped_ptr = NULL;
-    GLint old_buffer;
-    gles.core.glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &old_buffer);
-    gles.core.glBindBuffer(target, buffer);
-    mapped_ptr = glMapBufferRange_internal(target, offset, length, access);
-    gles.core.glBindBuffer(target, old_buffer);
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    void* mapped_ptr = glMapBufferRange_internal(GL_ARRAY_BUFFER, offset, length, access);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
     return mapped_ptr;
 }
 
@@ -1679,72 +1766,129 @@
 }
 
 void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
-    UNIMPLEMENTED();
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    gles.core.glBufferData(GL_ARRAY_BUFFER, size, data, usage);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
 }
 
 void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
-    const GLenum target = GL_ARRAY_BUFFER;
-    GLint old_buffer;
-    if(gles.ext.glBufferStorageEXT) {
-        gles.core.glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &old_buffer);
-        gles.core.glBindBuffer(target, buffer);
-        gles.ext.glBufferStorageEXT(target, size, data, flags);
-        gles.core.glBindBuffer(target, old_buffer);
-    }
-    else {
-        gles.core.glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &old_buffer);
-        gles.core.glBindBuffer(target, buffer);
-        gles.core.glBufferData(target, size, data, GL_STATIC_DRAW);
-        gles.core.glBindBuffer(target, old_buffer);
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+
+    if (gles.ext.glBufferStorageEXT) {
+        gles.ext.glBufferStorageEXT(GL_ARRAY_BUFFER, size, data, flags);
+    } else {
+        gles.core.glBufferData(GL_ARRAY_BUFFER, size, data, GL_STATIC_DRAW);
     }
+
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
 }
 
 void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
-    const GLenum target = GL_ARRAY_BUFFER;
-    GLint old_buffer;
-    gles.core.glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &old_buffer);
-    gles.core.glBindBuffer(target, buffer);
-    gles.core.glBufferSubData(target, offset, size, data);
-    gles.core.glBindBuffer(target, old_buffer);
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    gles.core.glBufferSubData(GL_ARRAY_BUFFER, offset, size, data);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
 }
 
 void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
+    const GLenum bufs[] = { buf }; // GLES uses glDrawBuffers
+
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glDrawBuffers(1, bufs);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glDrawBuffers(1, bufs);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
+
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glDrawBuffers(n, bufs);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glDrawBuffers(n, bufs);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
+
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glFramebufferParameteri(target, pname, param);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glFramebufferParameteri(target, pname, param);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_READ_FRAMEBUFFER;
+
+    if (gl_state.read_fbo == framebuffer) {
+        gles.core.glReadBuffer(src);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.read_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glReadBuffer(src);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
+
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
-    GLint oldDrawFbo;
-    gles.core.glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &oldDrawFbo);
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
 
-    if ((GLuint)oldDrawFbo != framebuffer) {
-        gles.core.glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glFramebufferTexture(target, attachment, texture, level);
+        return;
     }
 
-    gles.core.glFramebufferTexture(GL_FRAMEBUFFER, attachment, texture, level);
-
-    if ((GLuint)oldDrawFbo != framebuffer) {
-        gles.core.glBindFramebuffer(GL_FRAMEBUFFER, oldDrawFbo);
-    }
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glFramebufferTexture(target, attachment, texture, level);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
-    UNIMPLEMENTED();
+    const GLenum target = GL_DRAW_FRAMEBUFFER;
+
+    if (gl_state.draw_fbo == framebuffer) {
+        gles.core.glFramebufferTextureLayer(target, attachment, texture, level, layer);
+        return;
+    }
+
+    GLuint old_fbo = gl_state.draw_fbo;
+    glBindFramebuffer_internal(target, framebuffer);
+    gles.core.glFramebufferTextureLayer(target, attachment, texture, level, layer);
+    glBindFramebuffer_internal(target, old_fbo);
 }
 
 void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
@@ -2066,26 +2210,6 @@
 }
 
 void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {
-    GLint pack_buffer = 0;
-    // Check if a Pixel Buffer Object is bound to the pixel pack target.
-    gles.core.glGetIntegerv(GL_PIXEL_PACK_BUFFER_BINDING, &pack_buffer);
-
-    // If a PBO is bound, and the 'pixels' argument is a small integer, it's being
-    // used as an offset into the PBO, which is the trigger for this operation.
-    if (pack_buffer != 0) {
-        // A non-zero 'pixels' value when a PBO is bound is treated as an offset.
-        // Even if the offset is 0, the operation is still a PBO transfer.
-        
-        printf("[Layer] PBO is bound for glReadPixels. Forcing unmap to prevent 'PBO is mapped' error.\n");
-        
-        // Unmap the buffer on the application's behalf.
-        GLboolean unmap_result = gles.core.glUnmapBuffer(GL_PIXEL_PACK_BUFFER);
-        
-        if (unmap_result == GL_FALSE) {
-            // This is a more serious problem, but we should still try to continue.
-            fprintf(stderr, "[Layer] WARNING: Implicit unmap of PBO failed before glReadPixels. The driver may still error.\n");
-        }
-    }
     gles.core.glReadPixels(x, y, width, height, format, type, pixels);
 }
 
@@ -2674,15 +2798,10 @@
 }
 
 GLboolean glUnmapNamedBuffer(GLuint buffer) {
-    const GLenum target = GL_ARRAY_BUFFER;
-    GLboolean result;
-
-    GLint old_buffer;
-    gles.core.glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &old_buffer);
-    gles.core.glBindBuffer(target, buffer);
-    result = gles.core.glUnmapBuffer(target);
-    gles.core.glBindBuffer(target, old_buffer);
-
+    GLuint old_buffer = gl_state.array_buffer;
+    glBindBuffer_internal(GL_ARRAY_BUFFER, buffer);
+    GLboolean result = gles.core.glUnmapBuffer(GL_ARRAY_BUFFER);
+    glBindBuffer_internal(GL_ARRAY_BUFFER, old_buffer);
     return result;
 }
 
